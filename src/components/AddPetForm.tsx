'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { generatePetRecommendations, generatePetTasks } from '@/lib/ai';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@radix-ui/react-label';

interface Pet {
  id: string;
  name: string;
  type: string;
  breed: string;
  age: string;
  weight: string;
  level: number;
}

export default function AddPetForm() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [showDialog, setShowDialog] = useState(false);
  const [recommendations, setRecommendations] = useState<string | null>(null);
  const [tasks, setTasks] = useState<string | null>(null);
  const [petInfo, setPetInfo] = useState({
    name: '',
    type: 'dog',
    breed: '',
    age: '',
    weight: ''
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const recommendationsResult = await generatePetRecommendations(petInfo);
      const tasksResult = await generatePetTasks(petInfo);

      setRecommendations(recommendationsResult);
      setTasks(tasksResult);
      setShowDialog(true);
    } catch (error) {
      console.error('Error adding pet:', error);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setPetInfo({
      name: '',
      type: 'dog',
      breed: '',
      age: '',
      weight: ''
    });
    setRecommendations(null);
    setTasks(null);
    setShowDialog(false);
  };

  const handleStartCaring = () => {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    const petId = Date.now().toString();
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∏—Ç–æ–º—Ü–∞
    const newPet: Pet = {
      id: petId,
      ...petInfo,
      level: 1
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    const savedPets = localStorage.getItem('pets');
    const pets = savedPets ? JSON.parse(savedPets) : [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    pets.push(newPet);
    localStorage.setItem('pets', JSON.stringify(pets));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ
    localStorage.setItem('currentPetId', petId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
    const petData = {
      pet: petInfo,
      recommendations,
      tasks
    };
    
    localStorage.setItem(`petCareData_${petId}`, JSON.stringify(petData));
    localStorage.setItem('petCareData', JSON.stringify(petData));
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    const initialStatus = {
      happiness: 100,
      energy: 100,
      hunger: 100,
      health: 100,
      lastUpdate: Date.now()
    };
    
    localStorage.setItem(`petStatus_${petId}`, JSON.stringify(initialStatus));
    localStorage.setItem('petStatus', JSON.stringify(initialStatus));
    
    setShowDialog(false);
    router.push('/tasks');
  };

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle>–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞</CardTitle>
          <CardDescription>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ, –∏ AI –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —É—Ö–æ–¥–∞
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="name">–ò–º—è –ø–∏—Ç–æ–º—Ü–∞</Label>
              <Input
                id="name"
                value={petInfo.name}
                onChange={(e) => setPetInfo({ ...petInfo, name: e.target.value })}
                required
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—Å–∏–∫"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="type">–¢–∏–ø –ø–∏—Ç–æ–º—Ü–∞</Label>
              <Select
                value={petInfo.type}
                onValueChange={(value) => setPetInfo({ ...petInfo, type: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="dog">–°–æ–±–∞–∫–∞ üêï</SelectItem>
                  <SelectItem value="cat">–ö–æ—à–∫–∞ üê±</SelectItem>
                  <SelectItem value="bird">–ü—Ç–∏—Ü–∞ ü¶ú</SelectItem>
                  <SelectItem value="other">–î—Ä—É–≥–æ–µ üêæ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="breed">–ü–æ—Ä–æ–¥–∞</Label>
              <Input
                id="breed"
                value={petInfo.breed}
                onChange={(e) => setPetInfo({ ...petInfo, breed: e.target.value })}
                placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="age">–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)</Label>
                <Input
                  id="age"
                  type="number"
                  value={petInfo.age}
                  onChange={(e) => setPetInfo({ ...petInfo, age: e.target.value })}
                  required
                  min="0"
                  step="0.1"
                  placeholder="1.5"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="weight">–í–µ—Å (–∫–≥)</Label>
                <Input
                  id="weight"
                  type="number"
                  value={petInfo.weight}
                  onChange={(e) => setPetInfo({ ...petInfo, weight: e.target.value })}
                  required
                  min="0"
                  step="0.1"
                  placeholder="4.5"
                />
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter>
          <Button 
            onClick={handleSubmit}
            disabled={loading}
            className="w-full"
          >
            {loading ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
              </>
            ) : (
              '–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞'
            )}
          </Button>
        </CardFooter>
      </Card>

      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI</DialogTitle>
            <DialogDescription>
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ –¥–ª—è {petInfo.name}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6 max-h-[60vh] overflow-y-auto">
            <div className="bg-indigo-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-indigo-900 mb-4">
                –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </h3>
              <div className="prose prose-indigo">
                <div className="whitespace-pre-wrap text-gray-700">
                  {recommendations}
                </div>
              </div>
            </div>

            <div className="bg-emerald-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-emerald-900 mb-4">
                –ó–∞–¥–∞—á–∏ –ø–æ —É—Ö–æ–¥—É
              </h3>
              <div className="prose prose-emerald">
                <div className="whitespace-pre-wrap text-gray-700">
                  {tasks}
                </div>
              </div>
            </div>
          </div>

          <DialogFooter className="sm:justify-between">
            <Button variant="outline" onClick={resetForm}>
              –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë
            </Button>
            <Button onClick={handleStartCaring}>
              –ù–∞—á–∞—Ç—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
} 